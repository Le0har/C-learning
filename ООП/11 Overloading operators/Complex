#include <iostream>

class Complex{
public:
    double Re;
    double Im;

Complex()
{
    Re = 0.0;
    Im = 0.0;
}

Complex (double Re, double Im): Re(Re), Im(Im)
{
}

Complex operator +(const Complex& right) const
{
    Complex temp;
    temp.Re = Re + right.Re;
    temp.Im = Im + right.Im;
    return temp;
}

Complex operator -(const Complex& right) const
{
    Complex temp;
    temp.Re = Re - right.Re;
    temp.Im = Im - right.Im;
    return temp;
}

Complex operator *(const Complex& right) const
{
    Complex temp;
    temp.Re = Re * right.Re - Im * right.Im;
    temp.Im = Re * right.Im + Im * right.Re;
    return temp;
}

Complex operator /(const Complex& right) const
{
    if ((right.Re*right.Re + right.Im*right.Im) == 0)
    {
        std::cout << "Деление на ноль!" << std::endl;
        exit(99);
    }
    Complex temp;
    temp.Re = (Re * right.Re + Im * right.Im) / (right.Re*right.Re + right.Im*right.Im);
    temp.Im = (Im * right.Im - Re * right.Im) / (right.Re*right.Re + right.Im*right.Im);
    return temp;
}

bool operator ==(const Complex& right) const
{
    return (Re == right.Re) && (Im == right.Im);
}

bool operator !=(const Complex& right) const
{
    return !((Re == right.Re) && (Im == right.Im));
}

Complex operator -() const
{
    Complex temp;
    temp.Re = - Re;
    temp.Im = - Im;
    return temp;
}
};

std::ostream& operator <<(std::ostream &out, const Complex p)
{
    return out << p.Re << " + " << p.Im;
}

int main()
{

    Complex a(1.1, 0.1);
    Complex b(2.2, 0.2);
    Complex c = a + b;
    Complex d = a - c;
    Complex e = a * b;
    Complex f = a / b;
    std::cout << (a == b) << std::endl;
    std::cout << (a != b) << std::endl;

    std::cout << c << std::endl;

    Complex g = - a;
    std::cout << g << std::endl;

    return 0;
}

