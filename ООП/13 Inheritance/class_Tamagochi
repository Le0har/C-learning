#include <iostream>
#include <string>

class Tamagochi {
private:
    std::string sound;
public:
    std::string name;
    int age;
    std::string breed;
    std::string typeOfAnimal;

    struct Toy {
    std::string color;
    std::string shape;
    };

    Toy* favoriteToys = new Toy[10];

    void voice()
    {
        std::cout << "sound = " << sound << std::endl;
    }

    void play()
    {
        Toy randomToy = favoriteToys[rand() % 10];
        std::cout << typeOfAnimal << " " << name << " играет с " << randomToy.shape << " цвета "
            << randomToy.color << std::endl;
    }

    void setSound(std::string mysound)
    {
        sound = mysound;
    }

    Tamagochi(std::string name = "Нет имени", int age = 0, std::string breed = "Нет породы",
              std::string sound = " ", std::string typeOfAnimal = " "):
              name(name), age(age), breed(breed), typeOfAnimal(typeOfAnimal)
    {
        setSound(sound);
    }
 };

class Cat: public Tamagochi {

public:
    static int countCat;

    Cat(): Tamagochi("Нет имени", 0, "Нет породы", "Мяу!", "Кошка")
    {
        countCat++;
    }

    Cat(std::string name, int age, std::string breed): Tamagochi(name, age, breed, "Мяу!", "Кошка")
    {
        countCat++;
    }

    Cat(const Cat& c): Tamagochi(c.name, c.age, c.breed, "Мяу!", "Кошка")
    {
        favoriteToys = new Toy[10];
        for(int i=0; i<10; i++)
        {
            favoriteToys[i].color = c.favoriteToys[i].color;
            favoriteToys[i].shape = c.favoriteToys[i].shape;
        }
        countCat++;
    }

    Cat& operator=(const Cat& c)
    {
        if(this == &c)
        {
            return *this;
        }
        name = c.name;
        age = c.age;
        breed = c.breed;
        delete[] favoriteToys;
        favoriteToys = new Toy[10];
        for(int i=0; i<10; i++)
        {
            favoriteToys[i].color = c.favoriteToys[i].color;
            favoriteToys[i].shape = c.favoriteToys[i].shape;
        }
        return *this;
    }

    ~Cat()
    {
        delete[] favoriteToys;
        countCat--;
    }
};

class Dog: public Tamagochi {

public:
    static int countDog;

    void chewBone()
    {
        std::cout << "Собака " << name << " грызёт кость" << std::endl;
    }

    Dog(): Tamagochi("Нет имени", 0, "Нет породы", "Гав!", "Собака")
    {
        countDog++;
    }

    Dog(std::string name, int age, std::string breed): Tamagochi(name, age, breed, "Гав!", "Собака")
    {
        countDog++;
    }

    Dog(const Dog& d): Tamagochi(d.name, d.age, d.breed, "Гав!", "Собака")
    {
        favoriteToys = new Toy[10];
        for(int i=0; i<10; i++)
        {
            favoriteToys[i].color = d.favoriteToys[i].color;
            favoriteToys[i].shape = d.favoriteToys[i].shape;
        }
        countDog++;
    }

    Dog& operator=(const Dog& d)
    {
        if(this == &d)
        {
            return *this;
        }
        name = d.name;
        age = d.age;
        breed = d.breed;
        delete[] favoriteToys;
        favoriteToys = new Toy[10];
        for(int i=0; i<10; i++)
        {
            favoriteToys[i].color = d.favoriteToys[i].color;
            favoriteToys[i].shape = d.favoriteToys[i].shape;
        }
        return *this;
    }

    ~Dog()
    {
        delete[] favoriteToys;
        countDog--;
    }
};

int Cat::countCat = 0;
int Dog::countDog = 0;

int main() {

    Cat murka("Мурка", 4, "Британская короткошёрстная");

    std::cout << "Имя: " << murka.name << std::endl;
    std::cout << "Возраст: " << murka.age << std::endl;
    std::cout << "Порода: " << murka.breed << std::endl;
    murka.voice();

    Cat barsik;

    std::cout << "Имя: " << barsik.name << std::endl;
    std::cout << "Возраст: " << barsik.age << std::endl;
    std::cout << "Порода: " << barsik.breed << std::endl;
    barsik.voice();

    std::cout << "Количество кошек = " << Cat::countCat << std::endl;

    murka.play();
    barsik.play();

    Dog reks("Рэкс", 7, "Немецкая овчарка");
    reks.play();
    reks.chewBone();

    return 0;
}
